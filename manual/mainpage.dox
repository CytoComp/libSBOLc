//////////////////////////////////////////////////////////////////////
/// @mainpage
/// 
/// @section overview Overview
/// 
/// There are a few different top-level subdirectories in the libSBOLc folder:
/// 
/// * [schema](https://github.com/SynBioDex/libSBOLc/tree/master/schema)
///   holds the SBOL schema files copied from libSBOLj
/// 
/// * [source](https://github.com/SynBioDex/libSBOLc/tree/master/source)
///   contains source code for the library
/// 
/// * [examples](https://github.com/SynBioDex/libSBOLc/tree/master/examples)
///   contains example code that uses the library,
///   as well as the xml test files from libSBOLj
/// 
/// * [manual](https://github.com/SynBioDex/libSBOLc/tree/master/manual)
///   contains source code for generating the online documentation
/// 
/// * [tests](https://github.com/SynBioDex/libSBOLc/tree/master/tests)
///   contains unit tests, as well as tests that
///   verify correct handling of the example xml files
/// 
/// * [wrapper](https://github.com/SynBioDex/libSBOLc/tree/master/wrapper)
///   contains code for generating the Python wrapper using SWIG
/// 
/// * Finally, there's the build folder for temporary build files, and
///   the release folder for finished binaries. They're created by CMake.
/// 
/// When running CMake and compiling, the main sbol library is always
/// created first because most of the optional targets depend on it:
/// @image html build_dependencies.png
/// 
/// Once built, the executables just depend on finding the correct
/// xml files:
/// @image html runtime_dependencies.png
/// 
/// @section tour A brief tour of the source code
/// 
/// There are a bunch of C source files, but they fall into a few general
/// categories: 
/// 
/// * dnasequence.h, sequenceannotation.h, dnacomponent.h, and collection.h
///   define the SBOL Core objects.
/// 
/// * array.h, object.h, and property.h define building blocks for those objects.
/// 
/// * document.h defines an SBOL Document.
/// 
/// * validator.h, reader.h, and writer.h perform operations on Documents.
///   They each have one main algorithm, and maybe some non-exported
///   supporting functions.
/// 
/// * And then there are a few other miscellaneous files like prototypes.h,
///   constants.h.in, and utilities.h; they each do something unique but limited.
/// 
/// You might be confused and/or annoyed with the profusion of similarly-named structs
/// and functions relating to SBOL objects. I know I would be seeing it for the
/// first time. Here are a couple diagrams to clarify what they're supposed
/// to represent:
/// 
/// @image html property_hierarchy.png
/// 
/// @image html struct_hierarchy.png
/// 
/// @section doxygen Updating this documentation
///
/// The code for this page is in mainpage.dox; the rest of the documentation
/// is scattered throughout the source/*.h files. There are also a couple graphs, 
/// which can be edited with the yEd graph editor from http://www.yworks.com/en/products_yed_about.html
/// 
/// After editing the source files, you
/// also need to generate html using Doxygen, and upload it to GitHub.
/// 
/// First, make sure you have Doxygen installed. Then check <code>SBOL_GENERATE_MANUAL</code>
/// in CMake, <code>cd</code> into <code>libSBOLc/build</code>,
/// and run <code>make</code>. Doxygen will generate a <code>libSBOLc/release/html</code>
/// folder full of html files. To change settings, edit Doxyfile.in first.
/// 
/// Copy the HTML to somewhere outside the main libSBOLc directory,
/// then <code>git checkout gh-pages</code>.
/// It's a special branch with nothing but HTML files.
/// There may also be some leftover untracked files from the master branch. Delete everything in there,
/// and replace it with the newly generated html files. Then <code>git push origin gh-pages</code>.
/// A minute or so later, the new documentation should be available at
/// http://SynBioDex.github.com/libSBOLc/
/// 
/// @section swig Updating the Python wrapper
/// 
/// To update the low-level Python wrapper, all you need to do is:
/// 
/// * check SBOL_GENERATE_PYTHON in CMake
/// 
/// * build the project
/// 
/// * keep these files from the release folder: _sbol_swig.so, sbol_swig.py, and sbol.py.
/// 
/// The first two are generated by SWIG, and represent a direct translation
/// of the C functions into Python. They're cross-platform so you should only
/// need to generate them once.
/// 
/// The last, sbol.py, is a high-level wrapper
/// that maps the C-like SWIG functions into a more natural Python interface.
/// It's not generated during a build, but only copied from the wrapper folder.
/// The catch is, you'll have to keep it up to date manually by editing the code.
/// 
/// The low-level wrapper also works by itself though. From the Python interpreter,
/// import sbol_swig for the low-level interface, or import sbol
/// for the high-level one.
/// 
/// One other thing to remember is that although the generated files are cross-platform,
/// they only work with the version of Python they were compiled against. If you try
/// to import the sbol/sbol_swig module from a different version you'll get a
/// seeminly unrelated "Fatal Python error: PyThreadState_Get: no current thread"
/// 
//////////////////////////////////////////////////////////////////////
