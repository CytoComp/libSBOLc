# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_sbol', [dirname(__file__)])
        except ImportError:
            import _sbol
            return _sbol
        if fp is not None:
            try:
                _mod = imp.load_module('_sbol', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _sbol = swig_import_helper()
    del swig_import_helper
else:
    import _sbol
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class DNASequence(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DNASequence, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DNASequence, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nucleotides"] = _sbol.DNASequence_nucleotides_set
    __swig_getmethods__["nucleotides"] = _sbol.DNASequence_nucleotides_get
    if _newclass:nucleotides = _swig_property(_sbol.DNASequence_nucleotides_get, _sbol.DNASequence_nucleotides_set)
    def __init__(self): 
        this = _sbol.new_DNASequence()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sbol.delete_DNASequence
    __del__ = lambda self : None;
DNASequence_swigregister = _sbol.DNASequence_swigregister
DNASequence_swigregister(DNASequence)

class DNAComponent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DNAComponent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DNAComponent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _sbol.DNAComponent_id_set
    __swig_getmethods__["id"] = _sbol.DNAComponent_id_get
    if _newclass:id = _swig_property(_sbol.DNAComponent_id_get, _sbol.DNAComponent_id_set)
    __swig_setmethods__["name"] = _sbol.DNAComponent_name_set
    __swig_getmethods__["name"] = _sbol.DNAComponent_name_get
    if _newclass:name = _swig_property(_sbol.DNAComponent_name_get, _sbol.DNAComponent_name_set)
    __swig_setmethods__["description"] = _sbol.DNAComponent_description_set
    __swig_getmethods__["description"] = _sbol.DNAComponent_description_get
    if _newclass:description = _swig_property(_sbol.DNAComponent_description_get, _sbol.DNAComponent_description_set)
    __swig_setmethods__["dnaSequence"] = _sbol.DNAComponent_dnaSequence_set
    __swig_getmethods__["dnaSequence"] = _sbol.DNAComponent_dnaSequence_get
    if _newclass:dnaSequence = _swig_property(_sbol.DNAComponent_dnaSequence_get, _sbol.DNAComponent_dnaSequence_set)
    __swig_setmethods__["annotations"] = _sbol.DNAComponent_annotations_set
    __swig_getmethods__["annotations"] = _sbol.DNAComponent_annotations_get
    if _newclass:annotations = _swig_property(_sbol.DNAComponent_annotations_get, _sbol.DNAComponent_annotations_set)
    __swig_setmethods__["collections"] = _sbol.DNAComponent_collections_set
    __swig_getmethods__["collections"] = _sbol.DNAComponent_collections_get
    if _newclass:collections = _swig_property(_sbol.DNAComponent_collections_get, _sbol.DNAComponent_collections_set)
    def __init__(self): 
        this = _sbol.new_DNAComponent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sbol.delete_DNAComponent
    __del__ = lambda self : None;
DNAComponent_swigregister = _sbol.DNAComponent_swigregister
DNAComponent_swigregister(DNAComponent)

class SequenceAnnotation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SequenceAnnotation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SequenceAnnotation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _sbol.SequenceAnnotation_id_set
    __swig_getmethods__["id"] = _sbol.SequenceAnnotation_id_get
    if _newclass:id = _swig_property(_sbol.SequenceAnnotation_id_get, _sbol.SequenceAnnotation_id_set)
    __swig_setmethods__["annotates"] = _sbol.SequenceAnnotation_annotates_set
    __swig_getmethods__["annotates"] = _sbol.SequenceAnnotation_annotates_get
    if _newclass:annotates = _swig_property(_sbol.SequenceAnnotation_annotates_get, _sbol.SequenceAnnotation_annotates_set)
    __swig_setmethods__["subComponent"] = _sbol.SequenceAnnotation_subComponent_set
    __swig_getmethods__["subComponent"] = _sbol.SequenceAnnotation_subComponent_get
    if _newclass:subComponent = _swig_property(_sbol.SequenceAnnotation_subComponent_get, _sbol.SequenceAnnotation_subComponent_set)
    __swig_setmethods__["genbankStart"] = _sbol.SequenceAnnotation_genbankStart_set
    __swig_getmethods__["genbankStart"] = _sbol.SequenceAnnotation_genbankStart_get
    if _newclass:genbankStart = _swig_property(_sbol.SequenceAnnotation_genbankStart_get, _sbol.SequenceAnnotation_genbankStart_set)
    __swig_setmethods__["end"] = _sbol.SequenceAnnotation_end_set
    __swig_getmethods__["end"] = _sbol.SequenceAnnotation_end_get
    if _newclass:end = _swig_property(_sbol.SequenceAnnotation_end_get, _sbol.SequenceAnnotation_end_set)
    __swig_setmethods__["precedes"] = _sbol.SequenceAnnotation_precedes_set
    __swig_getmethods__["precedes"] = _sbol.SequenceAnnotation_precedes_get
    if _newclass:precedes = _swig_property(_sbol.SequenceAnnotation_precedes_get, _sbol.SequenceAnnotation_precedes_set)
    def __init__(self): 
        this = _sbol.new_SequenceAnnotation()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sbol.delete_SequenceAnnotation
    __del__ = lambda self : None;
SequenceAnnotation_swigregister = _sbol.SequenceAnnotation_swigregister
SequenceAnnotation_swigregister(SequenceAnnotation)

class Collection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Collection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Collection, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _sbol.Collection_id_set
    __swig_getmethods__["id"] = _sbol.Collection_id_get
    if _newclass:id = _swig_property(_sbol.Collection_id_get, _sbol.Collection_id_set)
    __swig_setmethods__["name"] = _sbol.Collection_name_set
    __swig_getmethods__["name"] = _sbol.Collection_name_get
    if _newclass:name = _swig_property(_sbol.Collection_name_get, _sbol.Collection_name_set)
    __swig_setmethods__["description"] = _sbol.Collection_description_set
    __swig_getmethods__["description"] = _sbol.Collection_description_get
    if _newclass:description = _swig_property(_sbol.Collection_description_get, _sbol.Collection_description_set)
    __swig_setmethods__["components"] = _sbol.Collection_components_set
    __swig_getmethods__["components"] = _sbol.Collection_components_get
    if _newclass:components = _swig_property(_sbol.Collection_components_get, _sbol.Collection_components_set)
    __swig_setmethods__["collections"] = _sbol.Collection_collections_set
    __swig_getmethods__["collections"] = _sbol.Collection_collections_get
    if _newclass:collections = _swig_property(_sbol.Collection_collections_get, _sbol.Collection_collections_set)
    def __init__(self): 
        this = _sbol.new_Collection()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sbol.delete_Collection
    __del__ = lambda self : None;
Collection_swigregister = _sbol.Collection_swigregister
Collection_swigregister(Collection)


def readSBOL(*args):
  return _sbol.readSBOL(*args)
readSBOL = _sbol.readSBOL

def getNumCollections():
  return _sbol.getNumCollections()
getNumCollections = _sbol.getNumCollections

def getNthCollection(*args):
  return _sbol.getNthCollection(*args)
getNthCollection = _sbol.getNthCollection

def getNumCollectionsFor(*args):
  return _sbol.getNumCollectionsFor(*args)
getNumCollectionsFor = _sbol.getNumCollectionsFor

def getNthCollectionFor(*args):
  return _sbol.getNthCollectionFor(*args)
getNthCollectionFor = _sbol.getNthCollectionFor

def getNumDNAComponents():
  return _sbol.getNumDNAComponents()
getNumDNAComponents = _sbol.getNumDNAComponents

def getNthDNAComponent(*args):
  return _sbol.getNthDNAComponent(*args)
getNthDNAComponent = _sbol.getNthDNAComponent

def getNumDNAComponentsIn(*args):
  return _sbol.getNumDNAComponentsIn(*args)
getNumDNAComponentsIn = _sbol.getNumDNAComponentsIn

def getNthDNAComponentIn(*args):
  return _sbol.getNthDNAComponentIn(*args)
getNthDNAComponentIn = _sbol.getNthDNAComponentIn

def getNumSequenceAnnotations():
  return _sbol.getNumSequenceAnnotations()
getNumSequenceAnnotations = _sbol.getNumSequenceAnnotations

def getNthSequenceAnnotation(*args):
  return _sbol.getNthSequenceAnnotation(*args)
getNthSequenceAnnotation = _sbol.getNthSequenceAnnotation

def getNumSequenceAnnotationsIn(*args):
  return _sbol.getNumSequenceAnnotationsIn(*args)
getNumSequenceAnnotationsIn = _sbol.getNumSequenceAnnotationsIn

def getNthSequenceAnnotationIn(*args):
  return _sbol.getNthSequenceAnnotationIn(*args)
getNthSequenceAnnotationIn = _sbol.getNthSequenceAnnotationIn

def getNumPrecedes(*args):
  return _sbol.getNumPrecedes(*args)
getNumPrecedes = _sbol.getNumPrecedes

def getNthPrecedes(*args):
  return _sbol.getNthPrecedes(*args)
getNthPrecedes = _sbol.getNthPrecedes

def setCollectionID(*args):
  return _sbol.setCollectionID(*args)
setCollectionID = _sbol.setCollectionID

def setCollectionName(*args):
  return _sbol.setCollectionName(*args)
setCollectionName = _sbol.setCollectionName

def setCollectionDescription(*args):
  return _sbol.setCollectionDescription(*args)
setCollectionDescription = _sbol.setCollectionDescription

def setComponentID(*args):
  return _sbol.setComponentID(*args)
setComponentID = _sbol.setComponentID

def setComponentName(*args):
  return _sbol.setComponentName(*args)
setComponentName = _sbol.setComponentName

def setComponentDescription(*args):
  return _sbol.setComponentDescription(*args)
setComponentDescription = _sbol.setComponentDescription

def addComponentToCollection(*args):
  return _sbol.addComponentToCollection(*args)
addComponentToCollection = _sbol.addComponentToCollection

def setSequenceAnnotationID(*args):
  return _sbol.setSequenceAnnotationID(*args)
setSequenceAnnotationID = _sbol.setSequenceAnnotationID

def setSubComponent(*args):
  return _sbol.setSubComponent(*args)
setSubComponent = _sbol.setSubComponent

def addSequenceAnnotation(*args):
  return _sbol.addSequenceAnnotation(*args)
addSequenceAnnotation = _sbol.addSequenceAnnotation

def addPrecedesRelationship(*args):
  return _sbol.addPrecedesRelationship(*args)
addPrecedesRelationship = _sbol.addPrecedesRelationship

def cleanup():
  return _sbol.cleanup()
cleanup = _sbol.cleanup


